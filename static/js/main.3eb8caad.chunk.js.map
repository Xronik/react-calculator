{"version":3,"sources":["components/Button.js","components/Inputs.js","components/Result.js","App.js","index.js"],"names":["Button","button","inputs","type","onClick","Object","values","keys","InputsWrap","styled","div","Inputs","changeInputs","setNewValue","index","inputValue","newArr","name","onChange","ev","Number","target","value","CountResult","Result","count","ButtonWrap","Container","section","App","useState","setCount","btnValuesArr","a","b","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAWeA,I,EAAAA,EATf,YAAqC,IAAnBC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OACxB,OACE,yBAAQC,KAAK,SAASC,QAAS,WAC7BC,OAAOC,OAAOL,GAAQ,GAAGC,EAAO,GAAIA,EAAO,KAD7C,cAEKG,OAAOE,KAAKN,GAFjB,Q,QCmBJ,I,EAAMO,EAAaC,IAAOC,IAAV,uHAODC,EA5Bf,YAAmC,IAAjBC,EAAgB,EAAhBA,aAEVC,EAAc,SAACC,EAAOC,GAC1BH,GAAa,SAACV,GACZ,IAAIc,EAAM,YAAOd,GAEjB,OADAc,EAAOF,GAASC,EACTC,MAKX,OACE,eAACR,EAAD,WACE,uBAAOL,KAAK,SAASc,KAAK,aAAaC,SACrC,SAACC,GAASN,EAAY,EAAGO,OAAOD,EAAGE,OAAOC,WAC5C,uBAAOnB,KAAK,SAASc,KAAK,cAAcC,SACtC,SAACC,GAASN,EAAY,EAAGO,OAAOD,EAAGE,OAAOC,eCRlD,I,IAAMC,EAAcd,IAAOC,IAAV,iDAIFc,EAZf,YAA4B,IAAVC,EAAS,EAATA,MAChB,OACE,eAACF,EAAD,uEACeE,MC6BnB,IAAMC,EAAajB,IAAOC,IAAV,sPAaViB,EAAYlB,IAAOmB,QAAV,kUAUAC,EAnDf,WAAgB,IAAD,EAEaC,mBAAS,GAFtB,mBAENL,EAFM,KAECM,EAFD,OAGkBD,mBAAS,CAAC,EAAG,IAH/B,mBAGN5B,EAHM,KAGEU,EAHF,KAKPX,EAAS,CACb+B,aAAc,CACZ,CAAE,IAAK,SAACC,EAAGC,GAAQH,EAASE,EAAIC,KAChC,CAAE,IAAK,SAACD,EAAGC,GAAQH,EAASE,EAAIC,KAChC,CAAE,IAAK,SAACD,EAAGC,GAAQH,EAASE,EAAIC,KAChC,CAAE,IAAK,SAACD,EAAGC,GAAQH,EAASE,EAAIC,OAIpC,OACE,eAACP,EAAD,WACE,eAACD,EAAD,WACE,cAAC,EAAD,CAAQzB,OAAQA,EAAO+B,aAAa,GAAI9B,OAAQA,IAChD,cAAC,EAAD,CAAQD,OAAQA,EAAO+B,aAAa,GAAI9B,OAAQA,IAChD,cAAC,EAAD,CAAQD,OAAQA,EAAO+B,aAAa,GAAI9B,OAAQA,IAChD,cAAC,EAAD,CAAQD,OAAQA,EAAO+B,aAAa,GAAI9B,OAAQA,OAElD,cAAC,EAAD,CAAQU,aAAcA,IACtB,cAAC,EAAD,CAAQa,MAAOA,QCvBrBU,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.3eb8caad.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Button({ button, inputs }) {\r\n  return (\r\n    <button type='submit' onClick={() => {\r\n      Object.values(button)[0](inputs[0], inputs[1])\r\n    }}> {Object.keys(button)} </button>\r\n\r\n  )\r\n}\r\n\r\nexport default Button\r\n","import styled from 'styled-components';\r\n\r\nfunction Inputs({ changeInputs }) {\r\n\r\n  const setNewValue = (index, inputValue) => {\r\n    changeInputs((inputs) => {\r\n      let newArr = [...inputs]\r\n      newArr[index] = inputValue\r\n      return newArr\r\n    }\r\n    )\r\n  }\r\n\r\n  return (\r\n    <InputsWrap>\r\n      <input type=\"number\" name=\"firstValue\" onChange={\r\n        (ev) => { setNewValue(0, Number(ev.target.value)) }} />\r\n      <input type=\"number\" name=\"secondValue\" onChange={\r\n        (ev) => { setNewValue(1, Number(ev.target.value)) }} />\r\n    </InputsWrap>\r\n  )\r\n}\r\n\r\nconst InputsWrap = styled.div`\r\n  display:grid;\r\n  grid-area:inputs;\r\n  grid-template-columns: 1fr 1fr;\r\n  grid-gap:20px;\r\n`\r\n\r\nexport default Inputs\r\n","import styled from 'styled-components';\r\n\r\nfunction Result({ count }) {\r\n  return (\r\n    <CountResult>\r\n      Результат = {count}\r\n    </CountResult>\r\n  )\r\n}\r\n\r\nconst CountResult = styled.div`\r\n  grid-area:result;\r\n`\r\n\r\nexport default Result\r\n","import styled from 'styled-components';\nimport React, { useState } from 'react';\nimport Button from './components/Button'\nimport Inputs from './components/Inputs'\nimport Result from './components/Result'\n\nfunction App() {\n\n  const [count, setCount] = useState(0)\n  const [inputs, changeInputs] = useState([1, 1])\n\n  const button = {\n    btnValuesArr: [\n      { \"+\": (a, b) => { setCount(a + b) } },\n      { \"-\": (a, b) => { setCount(a - b) } },\n      { \"*\": (a, b) => { setCount(a * b) } },\n      { \"/\": (a, b) => { setCount(a / b) } },\n    ]\n  }\n\n  return (\n    <Container>\n      <ButtonWrap>\n        <Button button={button.btnValuesArr[0]} inputs={inputs} />\n        <Button button={button.btnValuesArr[1]} inputs={inputs} />\n        <Button button={button.btnValuesArr[2]} inputs={inputs} />\n        <Button button={button.btnValuesArr[3]} inputs={inputs} />\n      </ButtonWrap>\n      <Inputs changeInputs={changeInputs} />\n      <Result count={count} />\n    </Container>\n  );\n}\n\nconst ButtonWrap = styled.div`\n    display: grid;\n    grid-gap:20px;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: 1fr 1fr;\n    grid-area:buttons;\n    button {\n      width:60px;\n      height:60px;\n      font-size:24px;\n    }\n`\n\nconst Container = styled.section`\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    grid-template-rows: 200px repeat(2, 30px);\n    grid-auto-flow:column;\n    align-items: center;\n    justify-items:center;\n    grid-template-areas: \"buttons buttons buttons buttons\" \". inputs inputs .\" \". result result .\";\n`\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}